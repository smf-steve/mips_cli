#! /bin/bash

# This is a test file that provides the generated code for the following user-defined macro
#
# .macro average ( %some, %two, %his)
#    add  %some, %two, %his
#    srl  %some, $s0, 1
# .end_macro
#
# The following will be autogenerated, and stored in within the bash memory,
# when the above macro definition is created.

alias average="apply_macro average"


function macro_average_3 () { 
   #shift;   # make the name of the macro the original name

   # get rid of optional commas, formal commas are added below
   # if an input parameter has a space, then quote it.
   local one="  $(sed -e 's/,$//' -e 's/\(.* .*\)/"\1"/' <<< $1)"
   local two="  $(sed -e 's/,$//' -e 's/\(.* .*\)/"\1"/' <<< $2)"
   local three="$(sed -e 's/,$//' -e 's/\(.* .*\)/"\1"/' <<< $3)"


   # Issues:
   #   - arguements like %s, %so, %som, %some, apply the longest first
   #   - ensure $ are escaped within the HERE-Document
   cat <<-EOF  | sed -e "s/%some/${one}/g" \
                     -e "s/%two/${two}/g"  \
                     -e "s/%his/${three}/g"  
   addi %some, %two, %his
   srl %some, \$s0, 1
EOF
}



